1) Serilizer 사용하기
serializer가 어떤 역할을 수행하는지 잘 익혀 두어야 잘 활용할 수 있다. 따라서 아래 과정에 대해 상세히 알아둘 필요가 있다.

Serializing objects : 객체를 가져와서 데이터로 뿌려줌 (GET일 때)
serializer = CommentSerializer(comment)
serializer.data
# {'email': 'leila@example.com', 'content': 'foo bar', 'created': '2016-01-27T15:17:10.375877'}
Deserializing objects : 데이터를 받아서, DB에 저장될 수 있도록 1) 데이터 유효성 검사를 한 뒤, 2) 파이썬 딕셔너리 형태로 변환 (POST, PUT, PATCH일 때)
serializer = CommentSerializer(data=data)
serializer.is_valid()
# True
serializer.validated_data
# {'content': 'foo bar', 'email': 'leila@example.com', 'created': datetime.datetime(2012, 08, 22, 16, 20, 09, 822243)}
Saving instances : deserializing된 objects를 DB에 저장
comment = serializer.save()
# .save() will create a new instance.
serializer = CommentSerializer(data=data)
serializer.save()

# .save() will update the existing `comment` instance.
serializer = CommentSerializer(comment, data=data)
serializer.save()
1) Passing additional attributes to .save()

saving instance할 때 추가 정보를 전달하고 싶을 때가 있다. 가령, 현재 시간이라거나 현재 사용자 정보 등의 경우 말이다. 이렇게 추가로 정보를 전달하고 싶을 때는 .save()할 때 추가 정보를 전달하면 된다.

serializer.save(owner=request.user)
2) Overrding .save() directly

Contact form 같은 경우, 객체를 생성할 필요가 없이 단지 이메일이나 혹은 메시지를 보내는 로직만 필요한 경우가 있다. 이 때는 .save()의 오버라이드해서 로직을 수정해 줄 필요가 있다.

class ContactForm(serializers.Serializer):
    email = serializers.EmailField()
    message = serializers.CharField()

    def save(self):
        email = self.validated_data['email']
        message = self.validated_data['message']
        send_email(from=email, message=message)
2) serializers Fields
구체적인 필드 종류는 공식 문서를 참조할 것, 단 주로 사용하는 serializer의 핵심 속성들은 잘 이해하고 있어야 함.

Core Argument
read-only (Default=False)
write-only (Default=False)
required (Default=True)
allow_null (Default=False)
source (Default는 필드명과 동일한 모델의 필드)
validators
error_messages



***************************************************************************************************************************************************


3) Request, Response 공식문서 살펴보기
3-1) Request

DRF에서는 HTTP 요청 객체로서 HttpRequest 객체를 확장한 Request 객체를 사용한다. Request는 HttpRequest 객체보다 요청 내용을 유연하게 파싱할 수 있도록 돕는다. 자주 사용하게 될 Request의 속성은 아래와 같다.

Request Parsing
request.data : (POST, PUT, PATCH메소드에서) Body에 담겨 전달된 데이터를 리턴 (key:value)
request.query_params : 쿼리스트링으로 전달되는 데이터를 리턴 (key:value)
Request Authentication
request.user : django.contrib.auth.models.User의 객체를 리턴
request.auth : 해당 객체의 token를 리턴 (없다면, None을 리턴)
Browser enhancements
request.method : request의 메소드를 리턴
request.content_type : request의 컨텐트타입을 리턴
[request.POST와 request.data의 차이점]

request.POST  # 폼 데이터만 처리할 수 있고, POST 메소드에서만 동작한다.
request.data  # 임의의 데이터를 처리할 수 있고, POST, PUT, PATCH 메소드에서 동작한다.
2-2) Response

렌더링되지 않은 내용을 읽어서 클라이언트가 요청한 콘텐트 타입에 맞는 형식으로 자동 렌더링 해 준다. Pure Django에서는 전달할 데이터에 따라 HttpResponse, JsonResponse를 개발자가 직접 지정을 해 주어야 하지만, DRF의 Response를 이용하면 알아서 렌더링을 해 주기 때문에 편하게 쓸 수 있다.

# Signature
Response(data, status=None, template_name=None, headers=None, content_type=None)

# use case
return Response(data, status.HTTP_201_CREATED)
2-3) status

REST Framework에서는 status 모듈 안에 각각의 상태정보를 속성으로 담고 있다. 따라서 status.[상태 속성값]을 호출하면 그에 맞는 상태 값이 전달된다.

status.HTTP_200_OK
stauts.HTTP_400_BAD_REQUEST


***************************************************************************************************************************************************



3. 임포트한 모듈 이해
1) APIView
REST 프레임워크는 Django View 클래스의 하위 클래스로 APIView 클래스를 제공한다. APIView 클래스는 View 클래스와 아래와 같은 점에서 다른 부분이 있다.

Request는 Django의 HttpRequest 인스턴스가 아닌 REST 프레임워크의 request인스턴스가 됨
Django의 HttpResponse가 아닌 REST 프레임워크의 Response를 반환
APIException 예외케이스가 발견되면 적절한 response으로 조정됨
Incoming request를 authenticate하고, 적절한 권한 혹은 throttle(제한사항) 체크한 실행함
이 외에는 APIView 클래스는 View클래스를 사용하는 것과 동일하다. Incoming request는 .get()이나 .post()와 같은 적절한 핸들러 메서드로 전달된다.

2) get_object_or_404)
get_object_or_404 함수는 Django Model을 첫번째 인자로 받고, get() 함수에서 전달될 임의의 값을 키워드 인자로 받는다. 만약, 객체가 존재하지 않으면 Http404(page not found)를 띄운다.

article = get_object_or_404(Article, pk=pk)
4. Function-based view와 비교
엔드포인트 숫자와 각 엔드포인트의 역할은 완전히 동일하고, 동일한 결과물을 리턴함
다만, 차이점은 1) Function-based에서는 하나의 View에서 if request.method로 GET/DELETE/UPDATE를 분리한다면, Class-based에서는 def get/delete/update를 명시해 주기에 가독성이 더 좋음
Function-based에서는 try/except로 특정 객체가 존재하지 않을 때 예외 처리를 했다면, Class-based에서는 def get_object(self, pk)로 처리를 함
